// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package dag is a generated GoMock package.
package client

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	os "os"
	reflect "reflect"
)

// MockStorageClient is a mock of StorageClient interface
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// GetStorageSpace mocks base method
func (m *MockStorageClient) GetStorageSpace() (*StorageSpace, error) {
	ret := m.ctrl.Call(m, "GetStorageSpace")
	ret0, _ := ret[0].(*StorageSpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageSpace indicates an expected call of GetStorageSpace
func (mr *MockStorageClientMockRecorder) GetStorageSpace() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageSpace", reflect.TypeOf((*MockStorageClient)(nil).GetStorageSpace))
}

// ListNetworkTraffics mocks base method
func (m *MockStorageClient) ListNetworkTraffics(backwardTo int) (*ListTrafficResult, error) {
	ret := m.ctrl.Call(m, "ListNetworkTraffics", backwardTo)
	ret0, _ := ret[0].(*ListTrafficResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkTraffics indicates an expected call of ListNetworkTraffics
func (mr *MockStorageClientMockRecorder) ListNetworkTraffics(backwardTo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkTraffics", reflect.TypeOf((*MockStorageClient)(nil).ListNetworkTraffics), backwardTo)
}

// GetNetworkTraffic mocks base method
func (m *MockStorageClient) GetNetworkTraffic(date string) (*DownTraffic, error) {
	ret := m.ctrl.Call(m, "GetNetworkTraffic", date)
	ret0, _ := ret[0].(*DownTraffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTraffic indicates an expected call of GetNetworkTraffic
func (mr *MockStorageClientMockRecorder) GetNetworkTraffic(date interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTraffic", reflect.TypeOf((*MockStorageClient)(nil).GetNetworkTraffic), date)
}

// ListBuckets mocks base method
func (m *MockStorageClient) ListBuckets() (*BucketListing, error) {
	ret := m.ctrl.Call(m, "ListBuckets")
	ret0, _ := ret[0].(*BucketListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets
func (mr *MockStorageClientMockRecorder) ListBuckets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockStorageClient)(nil).ListBuckets))
}

// PutBucket mocks base method
func (m *MockStorageClient) PutBucket(bucket string) error {
	ret := m.ctrl.Call(m, "PutBucket", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBucket indicates an expected call of PutBucket
func (mr *MockStorageClientMockRecorder) PutBucket(bucket interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucket", reflect.TypeOf((*MockStorageClient)(nil).PutBucket), bucket)
}

// DeleteBucket mocks base method
func (m *MockStorageClient) DeleteBucket(bucket string) error {
	ret := m.ctrl.Call(m, "DeleteBucket", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket
func (mr *MockStorageClientMockRecorder) DeleteBucket(bucket interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockStorageClient)(nil).DeleteBucket), bucket)
}

// DoesBucketExist mocks base method
func (m *MockStorageClient) DoesBucketExist(bucket string) (bool, error) {
	ret := m.ctrl.Call(m, "DoesBucketExist", bucket)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesBucketExist indicates an expected call of DoesBucketExist
func (mr *MockStorageClientMockRecorder) DoesBucketExist(bucket interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesBucketExist", reflect.TypeOf((*MockStorageClient)(nil).DoesBucketExist), bucket)
}

// GetBucketPolicy mocks base method
func (m *MockStorageClient) GetBucketPolicy(bucket string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "GetBucketPolicy", bucket)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPolicy indicates an expected call of GetBucketPolicy
func (mr *MockStorageClientMockRecorder) GetBucketPolicy(bucket interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPolicy", reflect.TypeOf((*MockStorageClient)(nil).GetBucketPolicy), bucket)
}

// PutBucketPolicy mocks base method
func (m *MockStorageClient) PutBucketPolicy(bucket string, policy io.Reader) error {
	ret := m.ctrl.Call(m, "PutBucketPolicy", bucket, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBucketPolicy indicates an expected call of PutBucketPolicy
func (mr *MockStorageClientMockRecorder) PutBucketPolicy(bucket, policy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketPolicy", reflect.TypeOf((*MockStorageClient)(nil).PutBucketPolicy), bucket, policy)
}

// DeleteBucketPolicy mocks base method
func (m *MockStorageClient) DeleteBucketPolicy(bucket string) error {
	ret := m.ctrl.Call(m, "DeleteBucketPolicy", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucketPolicy indicates an expected call of DeleteBucketPolicy
func (mr *MockStorageClientMockRecorder) DeleteBucketPolicy(bucket interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPolicy", reflect.TypeOf((*MockStorageClient)(nil).DeleteBucketPolicy), bucket)
}

// ListObjects mocks base method
func (m *MockStorageClient) ListObjects(bucket, prefix, marker, delimiter string, maxKeys int) (*ObjectListing, error) {
	ret := m.ctrl.Call(m, "ListObjects", bucket, prefix, marker, delimiter, maxKeys)
	ret0, _ := ret[0].(*ObjectListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects
func (mr *MockStorageClientMockRecorder) ListObjects(bucket, prefix, marker, delimiter, maxKeys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockStorageClient)(nil).ListObjects), bucket, prefix, marker, delimiter, maxKeys)
}

// NextListObjects mocks base method
func (m *MockStorageClient) NextListObjects(previous *ObjectListing) (*ObjectListing, error) {
	ret := m.ctrl.Call(m, "NextListObjects", previous)
	ret0, _ := ret[0].(*ObjectListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextListObjects indicates an expected call of NextListObjects
func (mr *MockStorageClientMockRecorder) NextListObjects(previous interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextListObjects", reflect.TypeOf((*MockStorageClient)(nil).NextListObjects), previous)
}

// PutObject mocks base method
func (m *MockStorageClient) PutObject(bucket, key string, data *os.File, metadata *ObjectMetadata) error {
	ret := m.ctrl.Call(m, "PutObject", bucket, key, data, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject
func (mr *MockStorageClientMockRecorder) PutObject(bucket, key, data, metadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockStorageClient)(nil).PutObject), bucket, key, data, metadata)
}

// PutObjectAt mocks base method
func (m *MockStorageClient) PutObjectAt(bucket, key string, data *os.File, off, length int64, metadata *ObjectMetadata) error {
	ret := m.ctrl.Call(m, "PutObjectAt", bucket, key, data, off, length, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObjectAt indicates an expected call of PutObjectAt
func (mr *MockStorageClientMockRecorder) PutObjectAt(bucket, key, data, off, length, metadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectAt", reflect.TypeOf((*MockStorageClient)(nil).PutObjectAt), bucket, key, data, off, length, metadata)
}

// GetObject mocks base method
func (m *MockStorageClient) GetObject(bucket, key string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "GetObject", bucket, key)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (mr *MockStorageClientMockRecorder) GetObject(bucket, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockStorageClient)(nil).GetObject), bucket, key)
}

// DoesObjectExist mocks base method
func (m *MockStorageClient) DoesObjectExist(bucket, key string) (bool, error) {
	ret := m.ctrl.Call(m, "DoesObjectExist", bucket, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesObjectExist indicates an expected call of DoesObjectExist
func (mr *MockStorageClientMockRecorder) DoesObjectExist(bucket, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesObjectExist", reflect.TypeOf((*MockStorageClient)(nil).DoesObjectExist), bucket, key)
}

// GetObjectSummary mocks base method
func (m *MockStorageClient) GetObjectSummary(bucket, key string) (*ObjectSummary, error) {
	ret := m.ctrl.Call(m, "GetObjectSummary", bucket, key)
	ret0, _ := ret[0].(*ObjectSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectSummary indicates an expected call of GetObjectSummary
func (mr *MockStorageClientMockRecorder) GetObjectSummary(bucket, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectSummary", reflect.TypeOf((*MockStorageClient)(nil).GetObjectSummary), bucket, key)
}

// GetObjectMetadata mocks base method
func (m *MockStorageClient) GetObjectMetadata(bucket, key string) (*Object, error) {
	ret := m.ctrl.Call(m, "GetObjectMetadata", bucket, key)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectMetadata indicates an expected call of GetObjectMetadata
func (mr *MockStorageClientMockRecorder) GetObjectMetadata(bucket, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectMetadata", reflect.TypeOf((*MockStorageClient)(nil).GetObjectMetadata), bucket, key)
}

// DeleteObject mocks base method
func (m *MockStorageClient) DeleteObject(bucket, key string) error {
	ret := m.ctrl.Call(m, "DeleteObject", bucket, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockStorageClientMockRecorder) DeleteObject(bucket, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStorageClient)(nil).DeleteObject), bucket, key)
}

// DeleteMultipleObjects mocks base method
func (m *MockStorageClient) DeleteMultipleObjects(bucket string, keys []string, quiet bool) (*MultipleDeletionResult, error) {
	ret := m.ctrl.Call(m, "DeleteMultipleObjects", bucket, keys, quiet)
	ret0, _ := ret[0].(*MultipleDeletionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMultipleObjects indicates an expected call of DeleteMultipleObjects
func (mr *MockStorageClientMockRecorder) DeleteMultipleObjects(bucket, keys, quiet interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleObjects", reflect.TypeOf((*MockStorageClient)(nil).DeleteMultipleObjects), bucket, keys, quiet)
}

// ListMultipartUploads mocks base method
func (m *MockStorageClient) ListMultipartUploads(bucket, prefix, keyMarker, uploadIdMarker, delimiter string, maxUploads int) (*MultipartUploadListing, error) {
	ret := m.ctrl.Call(m, "ListMultipartUploads", bucket, prefix, keyMarker, uploadIdMarker, delimiter, maxUploads)
	ret0, _ := ret[0].(*MultipartUploadListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads
func (mr *MockStorageClientMockRecorder) ListMultipartUploads(bucket, prefix, keyMarker, uploadIdMarker, delimiter, maxUploads interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockStorageClient)(nil).ListMultipartUploads), bucket, prefix, keyMarker, uploadIdMarker, delimiter, maxUploads)
}

// NextListMultipartUploads mocks base method
func (m *MockStorageClient) NextListMultipartUploads(previous *MultipartUploadListing) (*MultipartUploadListing, error) {
	ret := m.ctrl.Call(m, "NextListMultipartUploads", previous)
	ret0, _ := ret[0].(*MultipartUploadListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextListMultipartUploads indicates an expected call of NextListMultipartUploads
func (mr *MockStorageClientMockRecorder) NextListMultipartUploads(previous interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextListMultipartUploads", reflect.TypeOf((*MockStorageClient)(nil).NextListMultipartUploads), previous)
}

// InitiateMultipartUpload mocks base method
func (m *MockStorageClient) InitiateMultipartUpload(bucket, key string, metadata *ObjectMetadata) (*MultipartUpload, error) {
	ret := m.ctrl.Call(m, "InitiateMultipartUpload", bucket, key, metadata)
	ret0, _ := ret[0].(*MultipartUpload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateMultipartUpload indicates an expected call of InitiateMultipartUpload
func (mr *MockStorageClientMockRecorder) InitiateMultipartUpload(bucket, key, metadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateMultipartUpload", reflect.TypeOf((*MockStorageClient)(nil).InitiateMultipartUpload), bucket, key, metadata)
}

// AbortMultipartUpload mocks base method
func (m *MockStorageClient) AbortMultipartUpload(upload *MultipartUpload) error {
	ret := m.ctrl.Call(m, "AbortMultipartUpload", upload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload
func (mr *MockStorageClientMockRecorder) AbortMultipartUpload(upload interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockStorageClient)(nil).AbortMultipartUpload), upload)
}

// CompleteMultipartUpload mocks base method
func (m *MockStorageClient) CompleteMultipartUpload(upload *MultipartUpload, parts []*Part) (*CompleteMultipartUploadResult, error) {
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", upload, parts)
	ret0, _ := ret[0].(*CompleteMultipartUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload
func (mr *MockStorageClientMockRecorder) CompleteMultipartUpload(upload, parts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockStorageClient)(nil).CompleteMultipartUpload), upload, parts)
}

// ListParts mocks base method
func (m *MockStorageClient) ListParts(bucket, key, uploadId string, partNumberMarker, maxParts int) (*PartListing, error) {
	ret := m.ctrl.Call(m, "ListParts", bucket, key, uploadId, partNumberMarker, maxParts)
	ret0, _ := ret[0].(*PartListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts
func (mr *MockStorageClientMockRecorder) ListParts(bucket, key, uploadId, partNumberMarker, maxParts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockStorageClient)(nil).ListParts), bucket, key, uploadId, partNumberMarker, maxParts)
}

// NextListParts mocks base method
func (m *MockStorageClient) NextListParts(previous *PartListing) (*PartListing, error) {
	ret := m.ctrl.Call(m, "NextListParts", previous)
	ret0, _ := ret[0].(*PartListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextListParts indicates an expected call of NextListParts
func (mr *MockStorageClientMockRecorder) NextListParts(previous interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextListParts", reflect.TypeOf((*MockStorageClient)(nil).NextListParts), previous)
}

// UploadPart mocks base method
func (m *MockStorageClient) UploadPart(upload *MultipartUpload, num int, data *os.File) (*Part, error) {
	ret := m.ctrl.Call(m, "UploadPart", upload, num, data)
	ret0, _ := ret[0].(*Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart
func (mr *MockStorageClientMockRecorder) UploadPart(upload, num, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockStorageClient)(nil).UploadPart), upload, num, data)
}

// UploadPartAt mocks base method
func (m *MockStorageClient) UploadPartAt(upload *MultipartUpload, num int, data *os.File, off, length int64) (*Part, error) {
	ret := m.ctrl.Call(m, "UploadPartAt", upload, num, data, off, length)
	ret0, _ := ret[0].(*Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPartAt indicates an expected call of UploadPartAt
func (mr *MockStorageClientMockRecorder) UploadPartAt(upload, num, data, off, length interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPartAt", reflect.TypeOf((*MockStorageClient)(nil).UploadPartAt), upload, num, data, off, length)
}

// Sign mocks base method
func (m *MockStorageClient) Sign(req *http.Request) error {
	ret := m.ctrl.Call(m, "Sign", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sign indicates an expected call of Sign
func (mr *MockStorageClientMockRecorder) Sign(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockStorageClient)(nil).Sign), req)
}

// Upload mocks base method
func (m *MockStorageClient) Upload(bucket, key string, data io.Reader, metadata *ObjectMetadata) error {
	ret := m.ctrl.Call(m, "Upload", bucket, key, data, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockStorageClientMockRecorder) Upload(bucket, key, data, metadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorageClient)(nil).Upload), bucket, key, data, metadata)
}

// UploadFile mocks base method
func (m *MockStorageClient) UploadFile(bucket, key string, fd *os.File, metadata *ObjectMetadata) error {
	ret := m.ctrl.Call(m, "UploadFile", bucket, key, fd, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockStorageClientMockRecorder) UploadFile(bucket, key, fd, metadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockStorageClient)(nil).UploadFile), bucket, key, fd, metadata)
}

// ResumeUploadFile mocks base method
func (m *MockStorageClient) ResumeUploadFile(bucket, key, uploadId string, fd *os.File, metadata *ObjectMetadata) error {
	ret := m.ctrl.Call(m, "ResumeUploadFile", bucket, key, uploadId, fd, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeUploadFile indicates an expected call of ResumeUploadFile
func (mr *MockStorageClientMockRecorder) ResumeUploadFile(bucket, key, uploadId, fd, metadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeUploadFile", reflect.TypeOf((*MockStorageClient)(nil).ResumeUploadFile), bucket, key, uploadId, fd, metadata)
}

// MockHTTPClient is a mock of HTTPClient interface
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}
